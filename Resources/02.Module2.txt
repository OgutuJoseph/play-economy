Module 2 - Your first microservice
• Module objectives
    - Create a .NET microservice from scratch
    - Define the microservices REST API
    - Define the Data Transfer Objects (DTOs) -> to establish contract between service and service clients.

1. Creating a microservice via the .NET CLI
    • Creating a dotnet app
        -> dotnet new webapi -n [Name : Play.Catalog.Service]
    • To specify .NET version during launch
        -> dotnet new webapi -n [Name : Play.Catalog.Service] --framework net5.0
    
    • Project Dir Analysis
    • .vscode -> contains files [test.json -> build and debug the app; launch.json -> how vscode launches the app]
    • Program.cs -> entrypoint which defines how we are to start the host / application
    • Startup.cs -> defines Service registration and request pipeline configuration
    • /Properties/launchSettings.json -> defines a number of things e.g.:
                                        -> applicationUrl -> defines what is the address of the microservice

    • Building app
        -> 1. [Inside Play.Catalog.Service] dotnet build
        -> 2. Terminal > Run Build Task > build [involes editing tasks.json and VSCode environemnt]

    • Running app
        -> [Inside Play.Catalog.Service] dotnet run
    
    • Install certs [to enable project to run on chrome, remove warning etc]
        -> dotnet dev-certs https --trust

2. Introduction to the REST API and DTOs
******

3. Adding the DTOs
- A DTO is an object that carries data between processes.
- Represents the contract between the microservice client.

• Using Record Types for DTOs as opposed to classes [pros]:
    -> Simpler to declare
    -> Value-based equality [when comparing two or more items, they will be considered equal if all their properties have the same value]
    -> Immutable by default [modifications after creation are not allowed]
    -> Built-in ToString() override [that shows the names and values of all properties]

4. Adding the REST API operations
• ActionResult
    -> Allows us to return status codes (e.g 200:OK, 204:BadRequest)
    -> Allows us to return a more specific type like DtoType (e.g: CreateItemDto, UpdateItemDto) if we need to.
    -> (Can return different types depending on what we have available)

• IActionResult
    -> When you don't want to return a specific type (No-Content)


5. Handling invalid inputs  
******
Module 5 - Synchronous inter-service communication
Creating Inventory microservice
******


1. Introduction to synchronous communication
••• Microservice communication styles
• Synchronous
    -> The client sends a request and waits for a response from the service
    -> The client cannot proceed without a response
    -> The client thread may use a blocking or non-blocking implementation (callback)
    -> Two approaches
        1. REST + HTTP Protocol
            - the traditional approach
            - business subjects are modelled as resources (xml/json), and http pairs are used to manipulate them
        2.  gRPC 
            - a binary message-based protocol in which clients and service exchange messages in the protocol buffers format
            - increasingly popular approach for internal inter-service communication
            -^ because it uses http2 and is more efficient than REST.

• Asynchronous
    -> The client sends a request to the service but the response, if any, is not send immediately


Implementing synchronous communication via IHttpClientFactory
******


2. Understanding timeouts and retries with exponential backoff
- In a distributed system, partial failures are bound to happen e.g.
    -> Network outages
    -> Hardware failures
    -> Dependency failures
    -> Or even routine things like having Deployment in progress
- You must design your service to be resilient to those partial failures

    • Setting Timeouts
        - A service client should be designed not toblock indefinitely and use timeouts.
            -> This ensures a more responsive experience and ensures resources are never tied up indefinitely.

    • Retries with exponential backoff
        - Performs call retries a certain number of times with a longer wait between each retry. 
            -> (e.g 1st retry after 2s, 2nd retry after 4s...) after multiple retries, it will let the call fail.
            -> the failing dependency has an increasing amount of time to recover.
            -> avoids overwhelming the dependency.



3. Implementing a timeout policy via Polly
• Adding Polly Nuget Package
    -> 1. [Inside Play.Inventory.Service] dotnet add package Microsoft.Extensions.Http.Polly


4. Implementing retries with exponential backoff
******


5. Understanding the circuit breaker pattern
******


6. Implementing the circuit breaker pattern
******

